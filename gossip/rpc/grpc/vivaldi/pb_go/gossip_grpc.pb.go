// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gossip.proto

package pb_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GossipStatus_PushGossip_FullMethodName     = "/GossipStatus/PushGossip"
	GossipStatus_PullGossip_FullMethodName     = "/GossipStatus/PullGossip"
	GossipStatus_ExchangeGossip_FullMethodName = "/GossipStatus/ExchangeGossip"
)

// GossipStatusClient is the client API for GossipStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipStatusClient interface {
	PushGossip(ctx context.Context, in *NodeUpdates, opts ...grpc.CallOption) (*PushReturn, error)
	PullGossip(ctx context.Context, in *CoreSession, opts ...grpc.CallOption) (*NodeUpdates, error)
	ExchangeGossip(ctx context.Context, in *NodeUpdates, opts ...grpc.CallOption) (*NodeUpdates, error)
}

type gossipStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipStatusClient(cc grpc.ClientConnInterface) GossipStatusClient {
	return &gossipStatusClient{cc}
}

func (c *gossipStatusClient) PushGossip(ctx context.Context, in *NodeUpdates, opts ...grpc.CallOption) (*PushReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushReturn)
	err := c.cc.Invoke(ctx, GossipStatus_PushGossip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipStatusClient) PullGossip(ctx context.Context, in *CoreSession, opts ...grpc.CallOption) (*NodeUpdates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeUpdates)
	err := c.cc.Invoke(ctx, GossipStatus_PullGossip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipStatusClient) ExchangeGossip(ctx context.Context, in *NodeUpdates, opts ...grpc.CallOption) (*NodeUpdates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeUpdates)
	err := c.cc.Invoke(ctx, GossipStatus_ExchangeGossip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipStatusServer is the server API for GossipStatus service.
// All implementations must embed UnimplementedGossipStatusServer
// for forward compatibility.
type GossipStatusServer interface {
	PushGossip(context.Context, *NodeUpdates) (*PushReturn, error)
	PullGossip(context.Context, *CoreSession) (*NodeUpdates, error)
	ExchangeGossip(context.Context, *NodeUpdates) (*NodeUpdates, error)
	mustEmbedUnimplementedGossipStatusServer()
}

// UnimplementedGossipStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGossipStatusServer struct{}

func (UnimplementedGossipStatusServer) PushGossip(context.Context, *NodeUpdates) (*PushReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushGossip not implemented")
}
func (UnimplementedGossipStatusServer) PullGossip(context.Context, *CoreSession) (*NodeUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullGossip not implemented")
}
func (UnimplementedGossipStatusServer) ExchangeGossip(context.Context, *NodeUpdates) (*NodeUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeGossip not implemented")
}
func (UnimplementedGossipStatusServer) mustEmbedUnimplementedGossipStatusServer() {}
func (UnimplementedGossipStatusServer) testEmbeddedByValue()                      {}

// UnsafeGossipStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipStatusServer will
// result in compilation errors.
type UnsafeGossipStatusServer interface {
	mustEmbedUnimplementedGossipStatusServer()
}

func RegisterGossipStatusServer(s grpc.ServiceRegistrar, srv GossipStatusServer) {
	// If the following call pancis, it indicates UnimplementedGossipStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GossipStatus_ServiceDesc, srv)
}

func _GossipStatus_PushGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipStatusServer).PushGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GossipStatus_PushGossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipStatusServer).PushGossip(ctx, req.(*NodeUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipStatus_PullGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipStatusServer).PullGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GossipStatus_PullGossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipStatusServer).PullGossip(ctx, req.(*CoreSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipStatus_ExchangeGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipStatusServer).ExchangeGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GossipStatus_ExchangeGossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipStatusServer).ExchangeGossip(ctx, req.(*NodeUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

// GossipStatus_ServiceDesc is the grpc.ServiceDesc for GossipStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GossipStatus",
	HandlerType: (*GossipStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushGossip",
			Handler:    _GossipStatus_PushGossip_Handler,
		},
		{
			MethodName: "PullGossip",
			Handler:    _GossipStatus_PullGossip_Handler,
		},
		{
			MethodName: "ExchangeGossip",
			Handler:    _GossipStatus_ExchangeGossip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gossip.proto",
}
